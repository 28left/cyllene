import re


def remove_watex(string):
    """
    Removes <watex> </watex> outer bracket, if present.
    """
    pattern = re.compile(r"<watex>((?:.|\n)*?)</watex>$")
    return pattern.sub(r"\1", string)


def convert_array(string):
    """
    Convert a Perl array declaration
        @VAR = (A, B, C)
    to JSON Problem syntax:
        VAR = [A, B, C]
    where A,B,C are either numerical or a string expression.
    """
    # if array is generated by 'pick" call, leave it alone,
    #     as it will be handled by ProblemDict class
    if re.match("pick\(", string):
        return convert_params(string)

    # replace outer () by [] and try to evaluate as array
    string = "[" + string.strip()[1:-1] + "]"
    string = convert_params(string)

    return string


def convert_params(string):
    """
    replace '$' Perl variable prefixes
    """
    # first catch '${...}'
    pattern = re.compile(r"\$\{(\w+)(\[)?\$?(\w+\])?\}")
    string = pattern.sub(r"\1\2\3", string)

    # now simple '$...'
    pattern = re.compile(r"\$(\w+)(\[)?\$?(\w+\])?")
    string = pattern.sub(r"\1\2\3", string)

    return string


def convert_params_string(string):
    """
    Replace '$' Perl variable prefixes by substitution 
    identifier @{.}
    """
    # catch functions ${f(x)} and $f(x)
    pattern = re.compile(r"\$\{(\w+)(\(.+?\))\}")
    string = pattern.sub(r"@{\1\2}", string)

    pattern = re.compile(r"\$(\w+)(\(.+?\))")
    string = pattern.sub(r"@{\1\2}", string)

    # now take care of the other expressions
    pattern = re.compile(r"\$\{(\w+)(\[)?\$?(\w+\])?\}")
    string = pattern.sub(r"@{\1\2\3}", string)

    pattern = re.compile(r"\$(\w+)(\[)?\$?(\w+\])?")
    string = pattern.sub(r"@{\1\2\3}", string)

    return string


def convert_eqn_tags(string):
    """
    Convert Perl code WebAssign markers <eqn .> to
    JSON substitution identifiers @{.}
    """
    eqn_list = re.findall(r"<(?:eqn|EQN) .*?>", string)
    replace_list = [convert_params(s) for s in eqn_list]

    for index, s in enumerate(eqn_list):
        string = string.replace(s, replace_list[index])

    pattern = re.compile(r"<(eqn|EQN) (.*?)>")
    string = pattern.sub(r"@{\2}", string)

    # Now convert tags of the form <eqn>...</eqn>
    eqn_list = re.findall(r"<(?:eqn|EQN)>.*?</(?:eqn|EQN)>", string)
    replace_list = [convert_params(s) for s in eqn_list]

    for index, s in enumerate(eqn_list):
        string = string.replace(s, replace_list[index])

    pattern = re.compile(r"<(eqn|EQN)>(.*?)</(eqn|EQN)>")
    string = pattern.sub(r"@{\2}", string)

    return string


def convert_watex(string):

    # remove <watex> brackets
    string = remove_watex(string)

    # find all <EQN...> and substitute @{.}
    string = convert_eqn_tags(string)

    # convert the Perl variable markers '$'
    string = convert_params_string(string)

    # convert watex specific notation
    string = string.replace("<s:union>", "\\cup")
    string = string.replace("<s:intersect>", "\\cap")

    # convert '\bf{}' to '<b> </b>'
    pattern = re.compile(r"\\bf\{(.*?)\}")
    string = pattern.sub(r"<b>\1</b>", string)

    # convert '\it{}' to '<i> </i>'
    pattern = re.compile(r"\\it\{(.*?)\}")
    string = pattern.sub(r"<i>\1</i>", string)

    # convert '\uline{}' to '<i> </i>'
    pattern = re.compile(r"\\uline\{(.*?)\}")
    string = pattern.sub(r"<i>\1</i>", string)

    # Escape the remaining '$'
    string = string.replace("$", "\$")

    # convert normal '\[ \]' math brackets to '$'
    pattern = re.compile(r"\\\[\s*(.*?)\s*\\\]")
    string = pattern.sub(r"$\1$", string)

    # replace <center> tags
    pattern = re.compile(r"<center>(.*?)</center>")
    string = pattern.sub(r'<p style="text-align:center">\1</p>', string)

    return string


def parse_webassign(parse_string: str, wrap_answers=False):
    stage = 0
    line_no = 0
    json_dict = {}
    json_dict["parameters"] = {}
    solution_found = False

    for line in parse_string.splitlines():

        # remove any part of the line that should be interpreted as a comment
        line = line.partition('#')[0]
        # skip any blank line
        if line.strip() == "":
            continue

        line_no += 1
        line = line.rstrip()

        # Stage 0: initialized
        if stage == 0 and (line == "<eqn>" or line == "<EQN>"):
            command_str = ''
            stage = 1
            # json_dict["parameters"] = { "constants": {}}

        # Stage 1: declaring variables
        elif stage == 1:
            if line == "''</eqn>" or line == "''</EQN>":
                # save command string
                json_dict["parameters"]["code"] = command_str

                stage = 2
            else:
                # collect lines into one string
                command_str += line + '\n'

        # Stage 2: finding first watex prompt (problem statement)
        if stage == 2:
            if re.match("<watex>", line):
                # start gathering statement
                statement = line
                # check whether closing </watex> bracket is in same line
                if re.match("</watex>$", line):
                    # if yes, go to stage 3: Statement processing
                    stage = 3

                else:
                    stage = 2.5

        # Stage 2.5: Find end of problem statement
        elif stage == 2.5:
            statement += line
            if re.match(".*</watex>$", line):
                # if yes, go to stage 3: Statement processing
                stage = 3

        # Stage 3: Parsing the statement
        elif stage == 3:
            # convert statement string Param Problem JSON format
            json_dict["statement"] = convert_watex(statement)

            # go to next stage
            stage = 4

        # Stage 4: Find "Answer" section
        elif stage == 4 and line == "Answer":

            # Found answer
            json_dict["choices"] = []
            stage = 5

        # Stage 5: Convert answer choices
        elif stage == 5:

            if re.match("Solution", line):
                # next up: solution
                solution = ""
                stage = 6
            elif line != "":
                # this line is another answer choice
                answer = convert_watex(line)
                if wrap_answers:
                    answer = "$" + answer + "$"
                json_dict["choices"].append(answer)

        # Stage 6: Find Solution
        elif stage == 6:
            if re.match("<watex>", line):

                # add line to solution
                solution += line
                # check whether closing </watex> bracket is in same line
                if re.match("</watex>$", line):
                    # if yes, go to stage 7: solution processing
                    solution_found = True
                    break
                else:
                    stage = 6.5

        # Stage 6.5: Find end of solution statement
        elif stage == 6.5:
            if line != "":
                solution += line
            if re.match(".*</watex>$", line):
                solution_found = True
                break

    if solution_found:
        json_dict["solution"] = convert_watex(solution)

    return json_dict
